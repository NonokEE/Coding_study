### 입력
import sys
ip = sys.stdin.readline

N, M = map(int, ip().split())
mat = []

for i in range(N):
    mat.append(list(map(int, ip().split())))

### 기둥이 필요한 행, 열 찾기
N_need = 0
M_need = 0

# 역행렬 만들기
transpose = [[1 for _ in range(N)] for _ in range(M)] 
for i in range(N):
    for j in range(M):
        transpose[j][i] = mat[i][j]

# 행 찾기
for i in range(N):
    if 0 not in mat[i]: N_need += 1

# 열 찾기
for j in range(M):
    if 0 not in transpose[j]: M_need += 1

### 필요한 기둥 개수
print(max([N_need, M_need]))


''' 기둥 세우기
직사각형 형태 궁전, 모든 가로 세로 줄에 대해서 적어도 기둥이 하나씩은 존재하도록 만들어야 한다.

첫 줄에 궁전의 세로크기 N, 가로크기 M 주어짐 (0 < N,M <= 50: int)
둘째 줄 부터 현재 기둥 상태 주어짐. 1이 빈칸, 0이 기둥 있는 칸

"
0 1 1
1 0 1
1 1 0 이런 식이면 기둥 세울 필요 없다 이말.

기둥이 필요한 행, 열을 알아내는게 먼저일 듯 하다. -> 어디에 세워야하는지 알 필요 X 몇 개 필요한지만 알면 된다.

n행에 기둥을 하나 세운다 치면, m열이랑 가능한 동시에 세워주는게 좋음.

n행에 기둥이 필요하다 칠 때, 기둥이 필요한 m열을 무조건 하나 같이 가져가 줄 수 있다.
ex)
N_need = 1 2 3
M_need = 1 2 3 4인 경우

1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 0
1 1 1 1 0

N의 1 2 3을 세우면서 M의 1 2 3도 같이 가져가 줄 수 있다. 
M의 2 3 4를 가져가도 사실 상관 없고, "이미 기둥이 있는 5열 만 아니라면" 어디에 기둥을 세워도 사실 상관 없다. 

즉, 어디에 세우느냐보다 가로, 세로가 각각 몇개의 기둥이 필요한지가 더 중요.
그리고 그렇게 해서 N쪽의 기둥을 다 채우고 ( [1,1], [2,2], [3,3]을 채웠다고 가정), 

0 1 1 1 1
1 0 1 1 1
1 1 0 1 1
1 1 1 1 0
1 1 1 1 0

M쪽에 4만 남았다고 하면, 4열의 아무 곳이나 채워주면 된다. (빈 공간이 있을 수 밖에 없다.)

가로 세로 길이가 다른 경우도 상관 없고, 오직 가로 세로가 각각 몇개의 기둥이 필요한지만 알면 된다.
그리고 그 중 최대값만큼만 기둥을 더 세우면 된다.
'''